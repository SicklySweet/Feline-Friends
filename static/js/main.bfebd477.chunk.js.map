{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","cats.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","username","email","id","react_default","a","createElement","className","alt","src","concat","CardList","cats","map","user","i","src_Card","key","SearchBox","searchfield","searchChange","type","placeholer","onChange","Scroll","props","style","overflowY","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","filteredCats","filter","toLowerCase","includes","src_SearchBox","src_Scroll","src_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAeeA,EAbF,SAAAC,GAAkC,IAA/BC,EAA+BD,EAA/BC,KAAMC,EAAyBF,EAAzBE,SAAUC,EAAeH,EAAfG,MAAOC,EAAQJ,EAARI,GACnC,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mDACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,OAAOC,IAAG,wBAAAC,OAA0BP,EAA1B,4BACnBC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKN,GACLI,EAAAC,EAAAC,cAAA,SAAIL,GACJG,EAAAC,EAAAC,cAAA,SAAIJ,MCcLS,EApBE,SAAAZ,GAAY,IAAVa,EAAUb,EAAVa,KACf,OACIR,EAAAC,EAAAC,cAAA,WAEIM,EAAKC,IAAI,SAACC,EAAMC,GACZ,OACIX,EAAAC,EAAAC,cAACU,EAAD,CACIC,IAAKF,EACLZ,GAAKS,EAAKG,GAAGZ,GACbH,KAAMY,EAAKG,GAAGf,KACdC,SAAUW,EAAKG,GAAGd,SAClBC,MAAOU,EAAKG,GAAGb,YCCxBgB,EAbG,SAAAnB,GAAiCA,EAA/BoB,YAA+B,IAAlBC,EAAkBrB,EAAlBqB,aAC7B,OACIhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,SACAC,UAAU,mCACVc,KAAK,SACLC,WAAW,iBACXC,SAAUH,MCTTR,EAAO,CAClB,CACET,GAAI,EACJH,KAAM,iBACNC,SAAU,UACVC,MAAO,wBAET,CACEC,GAAI,EACJH,KAAM,gBACNC,SAAU,UACVC,MAAO,mBAET,CACEC,GAAI,EACJH,KAAM,cACNC,SAAU,WACVC,MAAO,gCAET,CACEC,GAAI,EACJH,KAAM,kBACNC,SAAU,YACVC,MAAO,wBAET,CACEC,GAAI,EACJH,KAAM,cACNC,SAAU,oBACVC,MAAO,4BAET,CACEC,GAAI,EACJH,KAAM,eACNC,SAAU,cACVC,MAAO,iBAET,CACEC,GAAI,EACJH,KAAM,cACNC,SAAU,QACVC,MAAO,+BAET,CACEC,GAAI,EACJH,KAAM,sBACNC,SAAU,UACVC,MAAO,4BAET,CACEC,GAAI,EACJH,KAAM,aACNC,SAAU,WACVC,MAAO,6BAET,CACEC,GAAI,GACJH,KAAM,eACNC,SAAU,mBACVC,MAAO,yBCjDIsB,SARA,SAACC,GACZ,OACIrB,EAAAC,EAAAC,cAAA,OAAKoB,MAAO,CAACC,UAAW,SAAUC,OAAQ,UACrCH,EAAMI,YCmCJC,cAhCX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAWRI,eAAiB,SAACC,GACdR,EAAKS,SAAS,CAACrB,YAAaoB,EAAME,OAAOC,SAXrCX,EAAKY,MAAQ,CACT/B,KAAM,GACNO,YAAa,IAJPY,mFASVG,KAAKM,SAAS,CAAC5B,KAAMA,qCAOnB,IAAAgC,EAAAV,KACAW,EAAeX,KAAKS,MAAM/B,KAAKkC,OAAO,SAAAlC,GACxC,OAAOA,EAAKZ,KAAK+C,cAAcC,SAASJ,EAAKD,MAAMxB,YAAY4B,iBAEnE,OACI3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,kBACAH,EAAAC,EAAAC,cAAC2C,EAAD,CAAW7B,aAAcc,KAAKI,iBAC9BlC,EAAAC,EAAAC,cAAC4C,EAAD,KACI9C,EAAAC,EAAAC,cAAC6C,EAAD,CAAUvC,KAAMiC,aA1BdO,mBCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bfebd477.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, username, email, id}) => {\r\n    return (\r\n        <div className=\"tc bg-light-green dib pa3 ma2 grow bw2 shadow-5\">\r\n            <img alt=\"cats\" src={`https://robohash.org/${id}/set_set4?size=200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{username}</p>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react'\r\nimport Card from './Card'\r\n\r\nconst CardList = ({cats}) => {\r\n    return (\r\n        <div>\r\n            {\r\n            cats.map((user, i) => {\r\n                return (\r\n                    <Card \r\n                        key={i} \r\n                        id= {cats[i].id} \r\n                        name={cats[i].name}\r\n                        username={cats[i].username} \r\n                        email={cats[i].email}\r\n                        />\r\n        );\r\n    })\r\n            }\r\n        </div>         \r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react'\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n            className='pa3 ba b--green bg-lightest-blue'\r\n            type='search'\r\n            placeholer='search felines'\r\n            onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","export const cats = [\r\n  {\r\n    id: 1,\r\n    name: 'Herman Schultz',\r\n    username: 'Shocker',\r\n    email: 'shocker@villains.com'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Scott Summers',\r\n    username: 'Cyclops',\r\n    email: 'leader@xmen.com'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Wade Wilson',\r\n    username: 'Deadpool',\r\n    email: 'mercwithamouth@mercenary.com'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Michael Meowers',\r\n    username: 'The-Shape',\r\n    email: 'shape@evilwithin.com'\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Cat Benatar',\r\n    username: 'Crimes-of-Passion',\r\n    email: 'mymanager@promotions.com'\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Bubba Sawyer',\r\n    username: 'Leatherface',\r\n    email: 'bbq@texas.com'\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Greer Grant',\r\n    username: 'Tigra',\r\n    email: 'tigra@westcoastavengers.com'\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Barbara Ann Minerva',\r\n    username: 'Cheetah',\r\n    email: 'cheetah@legionofdoom.com'\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Chris Catt',\r\n    username: 'Starlord',\r\n    email: 'starlord@guardians.galaxy'\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Steve Mouser',\r\n    username: 'Captain Americat',\r\n    email: 'steve@catvengers.com'\r\n  }\r\n];","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll","import React, {Component} from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport {cats} from './cats';\r\nimport './App.css';\r\nimport Scroll from './Scroll';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            cats: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\ncomponentDidMount() {\r\n        this.setState({cats: cats})\r\n}\r\n\r\nonSearchChange = (event) => {\r\n    this.setState({searchfield: event.target.value})\r\n}    \r\n\r\nrender () {\r\n    const filteredCats = this.state.cats.filter(cats =>{\r\n        return cats.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n    })\r\n    return (\r\n        <div className='tc'>\r\n            <h1 className='f1'>Feline Friends</h1>\r\n            <SearchBox searchChange={this.onSearchChange} />\r\n            <Scroll>\r\n                <CardList cats={filteredCats}/>\r\n            </Scroll>\r\n        </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}